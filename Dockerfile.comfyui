# ---- ComfyUI for RTX 5090 (Blackwell) ----
FROM nvidia/cuda:12.9.1-cudnn-devel-ubuntu24.04

ENV DEBIAN_FRONTEND=noninteractive \
    TZ=America/New_York \
    PYTHONUNBUFFERED=1 \
    CUDA_VISIBLE_DEVICES=0 \
    TORCH_CUDA_ARCH_LIST=12.0 \
    FORCE_CUDA=1 \
    CUDA_HOME=/usr/local/cuda \
    LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH \
    TORCH_CUDNN_V8_API_ENABLED=1 \
    TORCH_CUDNN_V8_API_DISABLED=0 \
    TF_FORCE_GPU_ALLOW_GROWTH=true

# --- OS prerequisites --------------------------------------------------------
RUN apt-get update && apt-get install -y --no-install-recommends \
    software-properties-common && \
    apt-get update && apt-get install -y --no-install-recommends \
        python3 python3-venv python3-dev python3-pip git \
        build-essential ninja-build cmake pkg-config \
        libjpeg-dev libpng-dev ffmpeg wget tmux && \
    rm -rf /var/lib/apt/lists/*

# --- Create Python virtual environment ---
RUN python3 -m venv /opt/venv && \
    chmod -R 777 /opt/venv
ENV PATH=/opt/venv/bin:$PATH

# --- Core Python stack (PyTorch cu129) --------------------------------------
# By default install the latest nightly. Provide TORCH_VERSION / TORCHVISION_VERSION /
# TORCHAUDIO_VERSION build args to pin specific wheels when needed.
ARG TORCH_CHANNEL="https://download.pytorch.org/whl/nightly/cu129"
ARG TORCH_VERSION=""
ARG TORCHVISION_VERSION=""
ARG TORCHAUDIO_VERSION=""

RUN set -eux; \
    pip install --upgrade pip wheel setuptools; \
    TORCH_SPEC="torch${TORCH_VERSION:+==${TORCH_VERSION}}"; \
    TORCHVISION_SPEC="torchvision${TORCHVISION_VERSION:+==${TORCHVISION_VERSION}}"; \
    TORCHAUDIO_SPEC="torchaudio${TORCHAUDIO_VERSION:+==${TORCHAUDIO_VERSION}}"; \
    pip install --no-cache-dir --index-url "${TORCH_CHANNEL}" "${TORCH_SPEC}"; \
    pip install --no-cache-dir --index-url "${TORCH_CHANNEL}" "${TORCHVISION_SPEC}" "${TORCHAUDIO_SPEC}"; \
    python - <<'PY'
import pathlib
import torch, torchvision, torchaudio
print('Torch wheel:', torch.__version__)
print('TorchVision wheel:', torchvision.__version__)
print('TorchAudio wheel:', torchaudio.__version__)
pathlib.Path('/pytorch-version.txt').write_text(f"torch=={torch.__version__}\n", encoding='utf-8')
PY

# --- Install required dependencies first ---
RUN pip install einops ninja cmake packaging wheel

# --- Copy pre-built wheels ---
COPY wheelhouse/ /wheelhouse/

# --- Install pre-built wheels ---
RUN if [ -d "/wheelhouse" ] && [ "$(ls -A /wheelhouse)" ]; then \
        pip install --no-index --find-links /wheelhouse \
        flash-attn xformers; \
    else \
        # --- Build xFormers (fallback if wheel not available) --- \
        pip install -v --no-build-isolation --no-cache-dir \
        git+https://github.com/facebookresearch/xformers.git@main#egg=xformers \
        # --- Build Flash-Attention 2 (fallback if wheel not available) --- \
        && pip install --no-cache-dir "packaging>=23.2" \
        && MAX_JOBS=4 pip install -v --no-build-isolation --no-cache-dir \
        git+https://github.com/Dao-AILab/flash-attention.git@main#egg=flash-attn \
        --config-settings=--install-option="--sm=120"; \
    fi \
    && rm -rf /wheelhouse

# --- CUDA Kernels for Scaled Dot Product Attention (SDPA) ---
RUN pip install --no-cache-dir \
      git+https://github.com/pytorch-labs/segment-anything-fast.git

# --- Remaining runtime deps ---
RUN pip install --no-cache-dir \
      opencv-python-headless pillow scipy \
      "transformers>=4.42" huggingface_hub gradio_client \
      fastapi uvicorn[standard] pydantic orjson

# --- App user ---
RUN groupadd -r appgroup && \
    useradd -m -r -s /bin/bash -u 1001 -g appgroup odin && \
    mkdir -p /workspace && \
    chown -R odin:appgroup /workspace

USER odin
WORKDIR /workspace

# --- Entrypoint script ---
USER root
COPY entrypoint-comfyui.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

USER odin
EXPOSE 8188
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
